// STEP 1: Home Screen build method
@override
Widget build(BuildContext context) {
  final gameName = context.select((GameState s) => s.gameName);
  return Stack(
    children: [
      const _BackgroundImage(),
      Scaffold(
        backgroundColor: Colors.transparent,
        appBar: AppBar(
          title: Text('üéâ $gameName üéâ'),
          backgroundColor: Colors.transparent,
          surfaceTintColor: Colors.transparent,
        ),
        body: const Padding(
          padding: EdgeInsets.all(16),
          child: Column(
            children: <Widget>[
              Game(),
              Divider(height: 64, thickness: 2),
              Expanded(child: LeaderBoard()),
            ],
          ),
        ),
      ),
    ],
  );
}

// STEP 2: _BackgroundImage build method
@override
Widget build(BuildContext context) {
  return Image.asset(
    'assets/images/background.png',
    fit: BoxFit.cover,
    width: double.infinity,
    height: double.infinity,
  );
}

// STEP 3: _GameSetup build method
@override
Widget build(BuildContext context) {
  return Card(
    margin: EdgeInsets.zero,
    color: Colors.white.withOpacity(0.7),
    elevation: 0,
    child: Padding(
      padding: const EdgeInsets.all(12.0),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          Text(
            'Who\'s playing?',
            style: Theme.of(context).textTheme.titleSmall,
          ),
          const SizedBox(height: 8),
          const _NameAndGoRow(),
        ],
      ),
    ),
  );
}

// STEP 4: _NameAndGoRow build method
@override
Widget build(BuildContext context) {
  return const Row(
    crossAxisAlignment: CrossAxisAlignment.center,
    children: [
      Expanded(child: _NameTextField()),
      SizedBox(width: 12),
      _GoButton(),
    ],
  );
}

// STEP 5: _PlayArea build method
@override
Widget build(BuildContext context) {
  final isStarting = context.select((GameState s) => s.isStarting);
  return SizedBox(
    height: 150,
    child: isStarting ? const _Countdown() : const _TapTapTap(),
  );
}

// STEP 6: _TapButton build method
@override
Widget build(BuildContext context) {
  final isPlaying = context.select((GameState s) => s.isPlaying);
  return Stack(
    alignment: Alignment.center,
    children: [
      ConfettiWidget(
        confettiController: context.read<GameState>().confettiController,
        blastDirectionality: BlastDirectionality.explosive,
        emissionFrequency: 1.0,
        shouldLoop: false,
        colors: const [
          Colors.green,
          Colors.blue,
          Colors.pink,
          Colors.orange,
          Colors.purple
        ],
        createParticlePath: context.read<GameState>().drawStar,
      ),
      FilledButton(
        onPressed: isPlaying ? context.read<GameState>().tap : null,
        style: FilledButton.styleFrom(
          shape: const CircleBorder(),
          padding: const EdgeInsets.all(20),
        ),
        child: const Icon(Icons.plus_one, size: 44),
      ),
    ],
  );
}

// STEP 7: LeaderBoard build method
@override
Widget build(BuildContext context) {
  return StreamBuilder<QuerySnapshot>(
    stream: context.read<GameState>().finishedGames,
    builder: (BuildContext context, AsyncSnapshot<QuerySnapshot> snapshot) {
      if (snapshot.hasError) {
        return const Text('Something went wrong');
      }
      if (snapshot.connectionState == ConnectionState.waiting) {
        return const Align(
          alignment: Alignment.center,
          child: LinearProgressIndicator(),
        );
      }
      final listViewChildren = _gamesAsWidgets(snapshot.data!.docs, context);
      return Column(
        children: [
          Text(
            'üèÜ Leaderboard üèÜ',
            style: Theme.of(context).textTheme.titleLarge,
          ),
          const SizedBox(height: 12),
          Expanded(child: ListView(children: listViewChildren)),
        ],
      );
    },
  );
}

// STEP 8: finishedGames initialization
final Stream<QuerySnapshot> finishedGames = FirebaseFirestore.instance
    .collection('games')
    .orderBy('taps', descending: true)
    .limit(30)
    .snapshots();